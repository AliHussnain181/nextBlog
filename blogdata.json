[
  {
    "likes": [],
    "_id": "652b578de6685a3a2615a9b2",
    "name": "DOM",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1707264405/jz5zahlkytdce0r3thwc.png",
    "content": "<h3>What is DOM?</h3>\r\n<p>The Document Object Model is a programming interface for web documents. Essentially, it represents the structure of a document as a tree of objects. In simpler terms, every element in an HTML or XML document&mdash;like paragraphs, images, and forms&mdash;becomes a part of a tree-like structure, each with its own set of properties and methods.</p>\r\n<h3>The Tree of Elements</h3>\r\n<p>Imagine your web document as a family tree, where the root is the entire document, and each branch represents an element. This hierarchical structure enables developers to manipulate the content and style of a webpage dynamically. Whether you want to change text, move elements around, or update the style, the DOM provides a way to interact with the structure of your document.</p>\r\n<h3>Dynamic Web Pages</h3>\r\n<p>The real magic of the DOM lies in its ability to create dynamic and interactive web pages. Using JavaScript, developers can access, modify, and manipulate the DOM to respond to user actions. For instance, when you click a button on a webpage and something changes, it's likely the DOM at work.</p>\r\n<h3>DOM and JavaScript</h3>\r\n<p>JavaScript is the language that brings the DOM to life. It provides the means to access, update, and manipulate the elements in the DOM tree. This interaction is what makes web pages responsive and engaging. Developers can use JavaScript to traverse the DOM, modify elements, add or remove content, and respond to user events.</p>\r\n<h3>DOM Events</h3>\r\n<p>Speaking of events, the DOM is also responsible for handling them. Whether it's a click, keypress, or mouse movement, the DOM is equipped to capture and respond to these events. This capability is at the core of building interactive web applications, from simple form validation to complex animations.</p>\r\n<h3>The Evolution of DOM</h3>\r\n<p>As web technologies evolve, so does the DOM. Modern web development frameworks and libraries often come with their own abstractions and optimizations of the DOM, making it even more efficient and user-friendly. However, the fundamental principles of the DOM remain constant, providing a stable foundation for web developers.</p>\r\n<h3>Conclusion</h3>\r\n<p>In the intricate web of technologies that power the internet, the Document Object Model stands tall as a fundamental concept. It's the bridge between static documents and dynamic, interactive web applications. As you delve deeper into web development, understanding and mastering the DOM will unlock a world of possibilities, allowing you to create seamless and engaging user experiences.</p>\r\n<p>So, the next time you interact with a web page, remember that behind the scenes, the DOM is orchestrating the dance of elements, events, and actions that make the web a dynamic and ever-evolving space.</p>",
    "category": "Programming",
    "createdAt": "2023-10-15T03:07:57.083Z",
    "__v": 0
  },
  {
    "likes": [],
    "_id": "652b58bbe6685a3a2615a9ba",
    "name": "Mongoose",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1707264370/pqncos8qsq7zk5rf0xmt.png",
    "content": "<div class=\"flex-1 overflow-hidden\">\r\n<div class=\"react-scroll-to-bottom--css-hyvgl-79elbk h-full dark:bg-gray-800\">\r\n<div class=\"react-scroll-to-bottom--css-hyvgl-1n7m0yu\">\r\n<div class=\"flex flex-col text-sm dark:bg-gray-800\">\r\n<div class=\"group final-completion w-full text-token-text-primary border-b border-black/10 gizmo:border-0 dark:border-gray-900/50 gizmo:dark:border-0 bg-gray-50 gizmo:bg-transparent dark:bg-[#444654] gizmo:dark:bg-transparent\" data-testid=\"conversation-turn-5\">\r\n<div class=\"p-4 justify-center text-base md:gap-6 md:py-6 m-auto\">\r\n<div class=\"flex flex-1 gap-4 text-base mx-auto md:gap-6 gizmo:gap-3 gizmo:md:px-5 gizmo:lg:px-1 gizmo:xl:px-5 md:max-w-2xl lg:max-w-[38rem] gizmo:md:max-w-3xl gizmo:lg:max-w-[40rem] gizmo:xl:max-w-[48rem] xl:max-w-3xl }\">\r\n<div class=\"relative flex w-[calc(100%-50px)] flex-col gizmo:w-full lg:w-[calc(100%-115px)] agent-turn\">\r\n<div class=\"flex-col gap-1 md:gap-3\">\r\n<div class=\"flex flex-grow flex-col gap-3 max-w-full\">\r\n<div class=\"min-h-[20px] flex flex-col items-start gap-3 whitespace-pre-wrap break-words overflow-x-auto\">\r\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\r\n<div class=\"flex-1 overflow-hidden\">\r\n<div class=\"react-scroll-to-bottom--css-hyvgl-79elbk h-full dark:bg-gray-800\">\r\n<div class=\"react-scroll-to-bottom--css-hyvgl-1n7m0yu\">\r\n<div class=\"flex flex-col text-sm dark:bg-gray-800\">\r\n<div class=\"group final-completion w-full text-token-text-primary border-b border-black/10 gizmo:border-0 dark:border-gray-900/50 gizmo:dark:border-0 bg-gray-50 gizmo:bg-transparent dark:bg-[#444654] gizmo:dark:bg-transparent\" data-testid=\"conversation-turn-5\">\r\n<div class=\"p-4 justify-center text-base md:gap-6 md:py-6 m-auto\">\r\n<div class=\"flex flex-1 gap-4 text-base mx-auto md:gap-6 gizmo:gap-3 gizmo:md:px-5 gizmo:lg:px-1 gizmo:xl:px-5 md:max-w-2xl lg:max-w-[38rem] gizmo:md:max-w-3xl gizmo:lg:max-w-[40rem] gizmo:xl:max-w-[48rem] xl:max-w-3xl }\">\r\n<div class=\"relative flex w-[calc(100%-50px)] flex-col gizmo:w-full lg:w-[calc(100%-115px)] agent-turn\">\r\n<div class=\"flex-col gap-1 md:gap-3\">\r\n<div class=\"flex flex-grow flex-col gap-3 max-w-full\">\r\n<div class=\"min-h-[20px] flex flex-col items-start gap-3 whitespace-pre-wrap break-words overflow-x-auto\">\r\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\r\n<div class=\"group final-completion w-full text-token-text-primary border-b border-black/10 gizmo:border-0 dark:border-gray-900/50 gizmo:dark:border-0 bg-gray-50 gizmo:bg-transparent dark:bg-[#444654] gizmo:dark:bg-transparent\" data-testid=\"conversation-turn-7\">\r\n<div class=\"p-4 justify-center text-base md:gap-6 md:py-6 m-auto\">\r\n<div class=\"flex flex-1 gap-4 text-base mx-auto md:gap-6 gizmo:gap-3 gizmo:md:px-5 gizmo:lg:px-1 gizmo:xl:px-5 md:max-w-2xl lg:max-w-[38rem] gizmo:md:max-w-3xl gizmo:lg:max-w-[40rem] gizmo:xl:max-w-[48rem] xl:max-w-3xl }\">\r\n<div class=\"relative flex w-[calc(100%-50px)] flex-col gizmo:w-full lg:w-[calc(100%-115px)] agent-turn\">\r\n<div class=\"flex-col gap-1 md:gap-3\">\r\n<div class=\"flex flex-grow flex-col gap-3 max-w-full\">\r\n<div class=\"min-h-[20px] flex flex-col items-start gap-3 whitespace-pre-wrap break-words overflow-x-auto\">\r\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\r\n<p><strong>Mastering Mongoose: The Gateway to MongoDB and Elegant Data Modeling</strong></p>\r\n<p>In the realm of Node.js and MongoDB, Mongoose stands as a robust and elegant tool, bridging the gap between your application and the NoSQL database. If MongoDB is the heart of your data storage, consider Mongoose as the skilled conductor orchestrating the symphony of data interaction.</p>\r\n<h3>A Primer on Mongoose</h3>\r\n<p>Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. Unlike traditional relational databases, MongoDB is schema-less, allowing flexibility but also raising challenges in terms of data consistency. Mongoose steps in to bring structure and sanity to this world by providing a schema-based solution, enabling developers to define the structure of their data.</p>\r\n<h3>Schema Definition</h3>\r\n<p>At the core of Mongoose lies the concept of schemas. A schema defines the blueprint of your data, specifying the fields, types, and constraints. This not only brings order to your data but also adds a layer of validation, ensuring that the data entering the database adheres to your predefined structure.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\r\n\r\n<span class=\"hljs-keyword\">const</span> userSchema = <span class=\"hljs-keyword\">new</span> mongoose.<span class=\"hljs-title class_\">Schema</span>({\r\n  <span class=\"hljs-attr\">name</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> },\r\n  <span class=\"hljs-attr\">email</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">unique</span>: <span class=\"hljs-literal\">true</span> },\r\n  <span class=\"hljs-attr\">age</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Number</span>, <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">18</span> },\r\n});\r\n</code></div>\r\n</div>\r\n<h3>Connecting to MongoDB</h3>\r\n<p>Mongoose simplifies the process of connecting to a MongoDB database. With a straightforward connection string, you can establish a connection and start interacting with your data.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\r\n\r\nmongoose.<span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-string\">'mongodb://localhost:27017/your-database'</span>, {\r\n  <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span>,\r\n  <span class=\"hljs-attr\">useUnifiedTopology</span>: <span class=\"hljs-literal\">true</span>,\r\n});\r\n</code></div>\r\n</div>\r\n<h3>CRUD Operations Made Elegant</h3>\r\n<p>Mongoose provides an expressive API for performing CRUD operations. Whether you're creating a new document, querying for specific data, updating, or deleting records, Mongoose streamlines the process with intuitive methods.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-comment\">// Create</span>\r\n<span class=\"hljs-keyword\">const</span> newUser = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John Doe'</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">'john@example.com'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span> });\r\nnewUser.<span class=\"hljs-title function_\">save</span>();\r\n\r\n<span class=\"hljs-comment\">// Read</span>\r\n<span class=\"hljs-keyword\">const</span> foundUser = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">User</span>.<span class=\"hljs-title function_\">findOne</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John Doe'</span> });\r\n\r\n<span class=\"hljs-comment\">// Update</span>\r\nfoundUser.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">26</span>;\r\n<span class=\"hljs-keyword\">await</span> foundUser.<span class=\"hljs-title function_\">save</span>();\r\n\r\n<span class=\"hljs-comment\">// Delete</span>\r\n<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">User</span>.<span class=\"hljs-title function_\">deleteOne</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John Doe'</span> });\r\n</code></div>\r\n</div>\r\n<h3>Middleware and Hooks</h3>\r\n<p>Mongoose introduces the concept of middleware or hooks, allowing you to execute functions before or after certain events. This can be incredibly powerful for tasks like data validation, encryption, or any custom logic tied to the data lifecycle.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\">userSchema.<span class=\"hljs-title function_\">pre</span>(<span class=\"hljs-string\">'save'</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">next</span>) {\r\n  <span class=\"hljs-comment\">// Custom logic before saving</span>\r\n  <span class=\"hljs-comment\">// ...</span>\r\n\r\n  <span class=\"hljs-comment\">// Call the next middleware in the stack</span>\r\n  <span class=\"hljs-title function_\">next</span>();\r\n});\r\n</code></div>\r\n</div>\r\n<h3>Population: Linking Documents</h3>\r\n<p>In a NoSQL database, relationships between data can be challenging. Mongoose addresses this with the concept of population, allowing you to reference documents in other collections and retrieve them in a single query.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> postSchema = <span class=\"hljs-keyword\">new</span> mongoose.<span class=\"hljs-title class_\">Schema</span>({\r\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">String</span>,\r\n  <span class=\"hljs-attr\">author</span>: { <span class=\"hljs-attr\">type</span>: mongoose.<span class=\"hljs-property\">Schema</span>.<span class=\"hljs-property\">Types</span>.<span class=\"hljs-property\">ObjectId</span>, <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">'User'</span> },\r\n});\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Post</span> = mongoose.<span class=\"hljs-title function_\">model</span>(<span class=\"hljs-string\">'Post'</span>, postSchema);\r\n</code></div>\r\n</div>\r\n<h3>Mongoose in the Express Lane</h3>\r\n<p>When building web applications with Node.js and Express, Mongoose integrates seamlessly. Its asynchronous nature aligns well with the non-blocking paradigm of Node.js, making it a natural choice for MongoDB-powered web servers.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\r\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\r\n\r\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\r\nmongoose.<span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-string\">'mongodb://localhost:27017/your-database'</span>, {\r\n  <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span>,\r\n  <span class=\"hljs-attr\">useUnifiedTopology</span>: <span class=\"hljs-literal\">true</span>,\r\n});\r\n<span class=\"hljs-comment\">// ...</span>\r\n</code></div>\r\n</div>\r\n<h3>Conclusion</h3>\r\n<p>In the dynamic world of data, Mongoose shines as a beacon of structure and order. It brings the flexibility of MongoDB together with the sanity of a well-defined schema, making it a preferred choice for Node.js developers venturing into the realm of NoSQL databases. Whether you're a seasoned developer or just embarking on your coding journey, Mongoose awaits, ready to transform your data interactions into a symphony of elegance and efficiency. Happy coding!</p>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"flex justify-between empty:hidden gizmo:justify-start gizmo:gap-3 lg:block\">\r\n<div class=\"text-gray-400 flex self-end lg:self-center justify-center gizmo:lg:justify-start mt-2 gizmo:mt-0 visible lg:gap-1 lg:absolute lg:top-0 lg:translate-x-full lg:right-0 lg:mt-0 lg:pl-2 gap-2 md:gap-3\"><button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center rounded-md p-1 text-xs gizmo:gap-1.5 gizmo:pl-0 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-200 disabled:dark:hover:text-gray-400 hover:bg-gray-100 hover:text-gray-700\"></button>\r\n<div class=\"flex gap-1 gizmo:gap-3\">&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
    "category": "Programming",
    "createdAt": "2023-10-15T03:12:59.445Z",
    "__v": 0
  },
  {
    "likes": [],
    "_id": "652bc22d71d5429a5f032008",
    "name": "Exploring Rust: A Beginner's Walkthrough",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1707264284/xwwvkjzaq59xczy7f0dg.png",
    "content": "<h2>Introduction to Rust</h2>\r\n<p>Rust is a modern, systems programming language that emphasizes performance, reliability, and productivity. If you're new to programming or coming from languages like C or C++, Rust might feel like a breath of fresh air. In this walkthrough, we'll cover some of the basics of Rust and get you started on your coding journey.</p>\r\n<h2>Setting Up Rust</h2>\r\n<p>Before diving into coding, you need to set up Rust on your machine. The process is straightforward and well-documented on the <a href=\"https://www.rust-lang.org/\" target=\"_new\">official Rust website</a>. Rust comes with a package manager called Cargo, which makes it easy to manage your projects.</p>\r\n<h2>Hello, Rust!</h2>\r\n<p>Let's start with the classic \"Hello, World!\" program. Open your favorite text editor and create a new file called <code>main.rs</code>. In this file, type the following code:</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">rust<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\r\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, Rust!\"</span>);\r\n}\r\n</code></div>\r\n</div>\r\n<p>Save the file and open a terminal. Navigate to the directory where your <code>main.rs</code> is located and run:</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">bash<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-bash\">$ cargo run\r\n</code></div>\r\n</div>\r\n<p>You should see the output: <code>Hello, Rust!</code>. Congratulations, you've just written your first Rust program!</p>\r\n<h2>Variables and Data Types</h2>\r\n<p>Rust is a statically-typed language, which means that you need to declare the type of your variables. Let's look at an example:</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">rust<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">my_number</span>: <span class=\"hljs-type\">i32</span> = <span class=\"hljs-number\">42</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">my_float</span>: <span class=\"hljs-type\">f64</span> = <span class=\"hljs-number\">3.14</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">is_rust_cool</span>: <span class=\"hljs-type\">bool</span> = <span class=\"hljs-literal\">true</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">my_char</span>: <span class=\"hljs-type\">char</span> = <span class=\"hljs-string\">'A'</span>;\r\n\r\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Number: {}\"</span>, my_number);\r\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Float: {}\"</span>, my_float);\r\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Rust is cool: {}\"</span>, is_rust_cool);\r\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Character: {}\"</span>, my_char);\r\n}\r\n</code></div>\r\n</div>\r\n<p>In this example, we've declared variables with different data types and printed them to the console.</p>\r\n<h2>Functions and Control Flow</h2>\r\n<p>Rust supports functions, just like many other programming languages. Here's a simple example:</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">rust<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_numbers</span>(a: <span class=\"hljs-type\">i32</span>, b: <span class=\"hljs-type\">i32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i32</span> {\r\n    a + b\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">add_numbers</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>);\r\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Result: {}\"</span>, result);\r\n\r\n    <span class=\"hljs-comment\">// Control flow with if statement</span>\r\n    <span class=\"hljs-keyword\">if</span> result &gt; <span class=\"hljs-number\">10</span> {\r\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Big result!\"</span>);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Small result!\"</span>);\r\n    }\r\n}\r\n</code></div>\r\n</div>\r\n<p>In this example, we define a function <code>add_numbers</code> that takes two integers and returns their sum. We then call this function in the <code>main</code> function and demonstrate a basic <code>if</code> statement for control flow.</p>\r\n<h2>Conclusion</h2>\r\n<p>This walkthrough only scratches the surface of what Rust has to offer. As you continue your Rust journey, explore concepts like ownership, borrowing, and lifetimes that make Rust a unique and powerful language.</p>\r\n<p>Happy coding in Rust! 🦀✨</p>\r\n<hr>\r\n<p>How was that for a Rust walkthrough? If you have specific topics or questions you'd like me to cover in more detail, feel free to let me know!</p>",
    "category": "Programming",
    "createdAt": "2023-10-15T10:42:53.949Z",
    "__v": 0
  },
  {
    "likes": [],
    "_id": "652bd85dfe1f89ce9ae413de",
    "name": "Mastering JavaScript's bind() and call() for Advanced Function Manipulation",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1707264317/nifgmb59lax3ygstarit.png",
    "content": "<p><span style=\"color: rgb(224, 62, 45);\">JavaScript, with its versatile and dynamic nature, empowers developers with tools like <code>bind()</code> and <code>call()</code> to take control of function execution and manipulate context. In this blog post, we'll delve into the advanced usage of <code>bind()</code> and <code>call()</code> to elevate your understanding of function handling in JavaScript.</span></p>\r\n<h3>Understanding bind():</h3>\r\n<h4>Basic Usage:</h4>\r\n<p>The <code>bind()</code> method creates a new function that, when called, has its <code>this</code> keyword set to a specific value. The simplest form looks like this:</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> originalFunction = <span class=\"hljs-keyword\">function</span>() {\r\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);\r\n};\r\n\r\n<span class=\"hljs-keyword\">const</span> boundFunction = originalFunction.<span class=\"hljs-title function_\">bind</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'John'</span> });\r\n<span class=\"hljs-title function_\">boundFunction</span>(); <span class=\"hljs-comment\">// Output: John</span>\r\n</code></div>\r\n</div>\r\n<h4>Advanced Binding:</h4>\r\n<ol>\r\n<li>\r\n<p><strong>Partial Application:</strong> <code>bind()</code> can be used for partial function application, allowing you to fix certain parameters while leaving others dynamic.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> greet = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">greeting, name</span>) {\r\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${greeting}</span>, <span class=\"hljs-subst\">${name}</span>!`</span>);\r\n};\r\n\r\n<span class=\"hljs-keyword\">const</span> greetHello = greet.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'Hello'</span>);\r\n<span class=\"hljs-title function_\">greetHello</span>(<span class=\"hljs-string\">'John'</span>); <span class=\"hljs-comment\">// Output: Hello, John!</span>\r\n</code></div>\r\n</div>\r\n</li>\r\n<li>\r\n<p><strong>Dynamic Context Switching:</strong> By using <code>bind()</code> dynamically, you can change the context of a function based on certain conditions.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">'myButton'</span>);\r\n\r\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'click'</span>, originalFunction.<span class=\"hljs-title function_\">bind</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Alice'</span> }));\r\n</code></div>\r\n</div>\r\n</li>\r\n</ol>\r\n<h3>Leveraging call():</h3>\r\n<h4>Basic Usage:</h4>\r\n<p>The <code>call()</code> method invokes a function with a given <code>this</code> value and arguments provided individually.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> greet = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">greeting</span>) {\r\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${greeting}</span>, <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>!`</span>);\r\n};\r\n\r\ngreet.<span class=\"hljs-title function_\">call</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Bob'</span> }, <span class=\"hljs-string\">'Hi'</span>); <span class=\"hljs-comment\">// Output: Hi, Bob!</span>\r\n</code></div>\r\n</div>\r\n<h4>Advanced Usage:</h4>\r\n<ol>\r\n<li>\r\n<p><strong>Context Switching:</strong> Similar to <code>bind()</code>, <code>call()</code> can dynamically change the context of a function.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> greetPerson = <span class=\"hljs-keyword\">function</span>() {\r\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.greeting}</span>, <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>!`</span>);\r\n};\r\n\r\n<span class=\"hljs-keyword\">const</span> context = { <span class=\"hljs-attr\">greeting</span>: <span class=\"hljs-string\">'Hola'</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Maria'</span> };\r\ngreetPerson.<span class=\"hljs-title function_\">call</span>(context); <span class=\"hljs-comment\">// Output: Hola, Maria!</span>\r\n</code></div>\r\n</div>\r\n</li>\r\n<li>\r\n<p><strong>Function Borrowing:</strong> <code>call()</code> is often used for borrowing methods from other objects.</p>\r\n<div class=\"bg-black rounded-md mb-4\">\r\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 gizmo:dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md\">javascript<button class=\"flex ml-auto gizmo:ml-0 gap-2 items-center\">Copy code</button></div>\r\n<div class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre hljs language-javascript\"><span class=\"hljs-keyword\">const</span> person = {\r\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Charlie'</span>,\r\n  <span class=\"hljs-attr\">introduce</span>: <span class=\"hljs-keyword\">function</span>() {\r\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hi, I'm <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>.`</span>);\r\n  },\r\n};\r\n\r\n<span class=\"hljs-keyword\">const</span> newPerson = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Diana'</span> };\r\nperson.<span class=\"hljs-property\">introduce</span>.<span class=\"hljs-title function_\">call</span>(newPerson); <span class=\"hljs-comment\">// Output: Hi, I'm Diana.</span>\r\n</code></div>\r\n</div>\r\n</li>\r\n</ol>\r\n<h3>Conclusion:</h3>\r\n<p>Mastering <code>bind()</code> and <code>call()</code> opens up a world of possibilities for manipulating function behavior and context in JavaScript. Whether you're creating partially applied functions, dynamically changing execution context, or borrowing methods, these techniques provide powerful tools for advanced function manipulation. As you continue to explore JavaScript's capabilities, a deeper understanding of these concepts will undoubtedly enhance your coding prowess.</p>",
    "category": "Programming",
    "createdAt": "2023-10-15T12:17:33.119Z",
    "__v": 0
  },
  {
    "_id": "65e0720a3fb10ab5ad046022",
    "name": "c language",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1709208074/ogy2uelhckpxiql2rm98.png",
    "content": "<p>**Title: Mastering C Programming: A Comprehensive Tutorial**</p>\r\n<p>Are you ready to explore the depths of programming? Whether you're a seasoned developer or just starting your journey, learning the C programming language can be an enriching experience. With its simplicity, power, and versatility, C serves as the foundation for many other languages and applications. In this tutorial, we'll take you through the essentials of C programming, right from your very first lines of code.</p>\r\n<p>### Getting Started with C</p>\r\n<p>Before we begin, let's ensure you have the necessary tools set up. You'll need a C compiler such as GCC (GNU Compiler Collection), which is freely available and widely used. Once you have your compiler ready, you're all set to start coding!</p>\r\n<p>### Your First C Program</p>\r\n<p>Let's kick things off with the quintessential \"Hello, World!\" program. Open your favorite text editor within the TinyMCE editor and type the following code:</p>\r\n<p><br><code>#include &lt;stdio.h&gt;</code></p>\r\n<p><code>int main() {</code><br><code>&nbsp; &nbsp; printf(\"Hello, World!\\n\");</code><br><code>&nbsp; &nbsp; return 0;</code><br><code>}</code></p>\r\n<p>Save this file with a `.c` extension, for instance, `hello.c`. Now, let's compile it. If you're using a terminal or command prompt, execute:</p>\r\n<p>```<br>gcc hello.c -o hello<br>```</p>\r\n<p>After successful compilation, you can run the program by typing `./hello` (on Unix-like systems) or `hello.exe` (on Windows). Congratulations! You've just executed your first C program.</p>\r\n<p>### Understanding Variables and Data Types</p>\r\n<p>In C, variables are used to store data temporarily. Before using a variable, you must declare its type. Here are some basic data types in C:</p>\r\n<p>- **int:** Integer data type.<br>- **float:** Floating-point data type.<br>- **char:** Character data type.</p>\r\n<p><br><code>#include &lt;stdio.h&gt;</code></p>\r\n<p><code>int main() {</code><br><code>&nbsp; &nbsp; int num1 = 10;</code><br><code>&nbsp; &nbsp; float num2 = 5.5;</code><br><code>&nbsp; &nbsp; char letter = 'A';</code></p>\r\n<p><code>&nbsp; &nbsp; printf(\"Integer: %d\\n\", num1);</code><br><code>&nbsp; &nbsp; printf(\"Float: %f\\n\", num2);</code><br><code>&nbsp; &nbsp; printf(\"Character: %c\\n\", letter);</code></p>\r\n<p><code>&nbsp; &nbsp; return 0;</code><br><code>}</code><br><br></p>\r\n<p>### Control Flow and Decision Making</p>\r\n<p>Control structures like `if`, `else`, and loops (`for`, `while`, `do-while`) allow you to control the flow of your program based on certain conditions.</p>\r\n<p><br><code>#include &lt;stdio.h&gt;</code></p>\r\n<p><code>int main() {</code><br><code>&nbsp; &nbsp; int num = 10;</code></p>\r\n<p><code>&nbsp; &nbsp; if (num &gt; 0) {</code><br><code>&nbsp; &nbsp; &nbsp; &nbsp; printf(\"Positive number\\n\");</code><br><code>&nbsp; &nbsp; } else if (num &lt; 0) {</code><br><code>&nbsp; &nbsp; &nbsp; &nbsp; printf(\"Negative number\\n\");</code><br><code>&nbsp; &nbsp; } else {</code><br><code>&nbsp; &nbsp; &nbsp; &nbsp; printf(\"Zero\\n\");</code><br><code>&nbsp; &nbsp; }</code></p>\r\n<p><code>&nbsp; &nbsp; return 0;</code><br><code>}</code><br><br></p>\r\n<p>### Functions and Modular Programming</p>\r\n<p>Functions in C allow you to break down your program into smaller, manageable parts. They improve code readability, reusability, and maintainability.</p>\r\n<p><br><code>#include &lt;stdio.h&gt;</code></p>\r\n<p><code>// Function to add two numbers</code><br><code>int add(int a, int b) {</code><br><code>&nbsp; &nbsp; return a + b;</code><br><code>}</code></p>\r\n<p><code>int main() {</code><br><code>&nbsp; &nbsp; int result = add(5, 3);</code><br><code>&nbsp; &nbsp; printf(\"Result: %d\\n\", result);</code><br><code>&nbsp; &nbsp; return 0;</code><br><code>}</code><br><br></p>\r\n<p>### Arrays and Pointers</p>\r\n<p>Arrays and pointers are fundamental concepts in C, enabling efficient manipulation of data and memory management.</p>\r\n<p><br><code>#include &lt;stdio.h&gt;</code></p>\r\n<p><code>int main() {</code><br><code>&nbsp; &nbsp; int numbers[5] = {1, 2, 3, 4, 5};</code></p>\r\n<p><code>&nbsp; &nbsp; // Accessing array elements</code><br><code>&nbsp; &nbsp; printf(\"First element: %d\\n\", numbers[0]);</code></p>\r\n<p><code>&nbsp; &nbsp; // Pointers and array traversal</code><br><code>&nbsp; &nbsp; int *ptr = numbers;</code><br><code>&nbsp; &nbsp; for (int i = 0; i &lt; 5; i++) {</code><br><code>&nbsp; &nbsp; &nbsp; &nbsp; printf(\"%d \", *(ptr + i));</code><br><code>&nbsp; &nbsp; }</code><br><code>&nbsp; &nbsp; printf(\"\\n\");</code></p>\r\n<p><code>&nbsp; &nbsp; return 0;</code><br><code>}</code><br><br></p>\r\n<p>File Handling</p>\r\n<p>C provides robust support for file handling operations, allowing you to read from and write to files seamlessly.</p>\r\n<p><code>#include &lt;stdio.h&gt;</code></p>\r\n<p><code>int main() {</code><br><code>&nbsp; &nbsp; FILE *file = fopen(\"example.txt\", \"w\");</code><br><code>&nbsp; &nbsp; if (file != NULL) {</code><br><code>&nbsp; &nbsp; &nbsp; &nbsp; fprintf(file, \"Hello, File Handling!\");</code><br><code>&nbsp; &nbsp; &nbsp; &nbsp; fclose(file);</code><br><code>&nbsp; &nbsp; &nbsp; &nbsp; printf(\"File written successfully.\\n\");</code><br><code>&nbsp; &nbsp; } else {</code><br><code>&nbsp; &nbsp; &nbsp; &nbsp; printf(\"Error opening file.\\n\");</code><br><code>&nbsp; &nbsp; }</code><br><code>&nbsp; &nbsp; return 0;</code><br><code>}</code><br><br></p>\r\n<p>### Conclusion</p>\r\n<p>You've completed a journey into the world of C programming! This tutorial has equipped you with the basics, but there's still much more to explore. Keep practicing, experimenting, and diving deeper into advanced topics. Remember, the key to mastery lies in consistent effort and curiosity. Happy coding with TinyMCE!</p>",
    "category": "Programming",
    "likes": [],
    "createdAt": "2024-02-29T12:01:14.551Z",
    "__v": 0
  },
  {
    "_id": "6624f2c36b8d7ce2d5ff7b9f",
    "name": "coding",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1713697473/sums9bx1s0ruhksxnhvo.jpg",
    "content": "<p>This is the initial content of the editor</p>\r\n<pre class=\"language-javascript\"><code>function createCache() {\r\n    const cache = {};\r\n  \r\n    return function cachedFunction(input) {\r\n      if (!(input in cache)) {\r\n        // Calculate the result for input and store it in the cache\r\n        cache[input] = expensiveFunction(input);\r\n      }\r\n  \r\n      return cache[input];\r\n    };\r\n  }\r\n  \r\n  // Example of an expensive function to compute Fibonacci numbers\r\n  function expensiveFunction(n) {\r\n    if (n &lt;= 1) {\r\n      return n;\r\n    }\r\n  \r\n    return expensiveFunction(n - 1) + expensiveFunction(n - 2);\r\n  }\r\n  \r\n  // Create a cached version of the expensive function\r\n  const cachedExpensiveFunction = createCache();\r\n  \r\n  // Call the cached function multiple times\r\n  console.log(cachedExpensiveFunction(10)); // This will calculate and cache Fibonacci(10)\r\n  console.log(cachedExpensiveFunction(10)); // This will retrieve the result from the cache\r\n  console.log(cachedExpensiveFunction(5));  // This will calculate and cache Fibonacci(5)\r\n  console.log(cachedExpensiveFunction(5));  // This will retrieve the result from the cache\r\n  </code></pre>",
    "category": "Programming",
    "likes": [],
    "createdAt": "2024-04-21T11:04:35.219Z",
    "__v": 0
  },
  {
    "_id": "674dd4a7808963f674d99848",
    "name": "Building a Comprehensive Blog Web Application Using Tailwind CSS and TinyMCE",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1733153958/ghbu9vswkcxuxugghivs.jpg",
    "content": "<h2>Building a Comprehensive Blog Web Application Using Tailwind CSS and TinyMCE</h2>\r\n<h4>Creating a blog web application requires a balance between aesthetic design and user functionality. In this article, we&rsquo;ll outline the steps to build a responsive blog app that incorporates <strong>Tailwind CSS</strong> for styling and <strong>TinyMCE</strong> as a rich-text editor. Additionally, we&rsquo;ll cover applying default styles to common HTML elements used in blog content to ensure a consistent user experience.</h4>\r\n<ol>\r\n<li>\r\n<p>Before starting, ensure you have the following installed on your system</p>\r\n<ul>\r\n<li><strong>Node.js</strong> (LTS version recommended)</li>\r\n<li><strong>React.js</strong> (if using a React-based framework)</li>\r\n<li><strong>Tailwind CSS</strong></li>\r\n<li><strong>TinyMCE</strong></li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<h4><strong>Tailwind CSS Base Styles</strong></h4>\r\n<p>Add these styles to your <code>index.css</code> file:</p>\r\n<p>&nbsp;</p>\r\n<pre class=\"language-css\"><code>@layer base {\r\n  body {\r\n    @apply bg-gray-50 text-gray-800 leading-relaxed font-sans;\r\n  }\r\n\r\n  h1 {\r\n    @apply text-4xl font-bold text-gray-900 my-6;\r\n  }\r\n\r\n  h2 {\r\n    @apply text-3xl font-semibold text-gray-800 my-5;\r\n  }\r\n\r\n  p {\r\n    @apply text-base text-gray-600 my-4;\r\n  }\r\n\r\n  a {\r\n    @apply text-blue-600 underline hover:text-blue-800;\r\n  }\r\n\r\n  ul {\r\n    @apply list-disc list-inside my-4;\r\n  }\r\n\r\n  ol {\r\n    @apply list-decimal list-inside my-4;\r\n  }\r\n\r\n  blockquote {\r\n    @apply italic border-l-4 border-gray-300 pl-4 text-gray-500 my-4;\r\n  }\r\n\r\n  pre {\r\n    @apply bg-gray-900 text-white p-4 rounded my-4 overflow-auto text-sm;\r\n  }\r\n\r\n  code {\r\n    @apply bg-gray-100 text-sm font-mono px-1 py-0.5 rounded;\r\n  }\r\n\r\n  table {\r\n    @apply w-full border-collapse border border-gray-300 my-6;\r\n  }\r\n\r\n  th {\r\n    @apply bg-gray-100 text-left px-4 py-2 border border-gray-300 text-gray-700;\r\n  }\r\n\r\n  td {\r\n    @apply px-4 py-2 border border-gray-300 text-gray-600;\r\n  }\r\n\r\n  img {\r\n    @apply max-w-full h-auto rounded-lg shadow my-4;\r\n  }\r\n\r\n  form {\r\n    @apply my-6;\r\n  }\r\n\r\n  input, textarea, button {\r\n    @apply border border-gray-300 rounded-md p-2 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-400;\r\n  }\r\n\r\n  input[type=\"submit\"], button {\r\n    @apply bg-blue-600 text-white font-medium px-4 py-2 rounded-md hover:bg-blue-700;\r\n  }\r\n}\r\n</code></pre>",
    "category": "tech",
    "likes": [],
    "createdAt": "2024-12-02T15:39:19.508Z",
    "__v": 0
  },
  {
    "_id": "674e3f4c53e6fdec0a099b1b",
    "name": "Solution: Isolate TinyMCE Styles",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1733181259/qbnb0kynzeghbuwqddlu.jpg",
    "content": "<ol>\r\n<li>\r\n<p><strong>Prevent Tailwind Styles from Affecting TinyMCE:</strong> TinyMCE uses an iframe internally for its content, but Tailwind classes can still affect the outer container or initialization styles. You can isolate the editor by using Tailwind's <code>@layer</code> directive or scoping styles.</p>\r\n</li>\r\n<li>\r\n<p><strong>Steps to Fix:</strong></p>\r\n<ul>\r\n<li>Add a <code>not-prose</code> or custom class to ensure Tailwind's base styles (e.g., <code>prose</code>, typography plugin) don't interfere.</li>\r\n<li>Explicitly style TinyMCE&rsquo;s iframe content using its content CSS.</li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<h2>Code Example: Embedding TinyMCE in React</h2>\r\n<p>&nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n<pre class=\"language-markup\"><code>npm install @tinymce/tinymce-react\r\n</code></pre>\r\n<h3><strong>React Component Example</strong></h3>\r\n<pre class=\"language-javascript\"><code>import React from \"react\";\r\nimport { Editor } from \"@tinymce/tinymce-react\";\r\n\r\nexport default function TinyMCEEditor() {\r\n  const handleEditorChange = (content, editor) =&gt; {\r\n    console.log(\"Content was updated:\", content);\r\n  };\r\n\r\n  return (\r\n    &lt;div className=\"not-prose\"&gt; {/* Prevent Tailwind Typography styles */}\r\n      &lt;Editor\r\n        apiKey=\"your-api-key\" // Get this from TinyMCE\r\n        initialValue=\"&lt;p&gt;This is the initial content of the editor&lt;/p&gt;\"\r\n        init={{\r\n          height: 500,\r\n          menubar: false,\r\n          plugins: [\r\n            \"advlist autolink lists link image charmap print preview anchor\",\r\n            \"searchreplace visualblocks code fullscreen\",\r\n            \"insertdatetime media table paste code help wordcount\",\r\n          ],\r\n          toolbar:\r\n            \"undo redo | formatselect | bold italic backcolor | \\\r\n            alignleft aligncenter alignright alignjustify | \\\r\n            bullist numlist outdent indent | removeformat | help\",\r\n          content_style: `\r\n            body { \r\n              font-family: 'Inter', sans-serif; \r\n              font-size: 16px; \r\n            } \r\n          `, // Custom content styling inside the iframe\r\n        }}\r\n        onEditorChange={handleEditorChange}\r\n      /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<h3><strong>Key Fixes in the Code</strong></h3>\r\n<ol>\r\n<li>\r\n<p><strong><code>not-prose</code>:</strong> Use Tailwind's <code>not-prose</code> class or a custom container class to ensure Tailwind's typography plugin doesn't apply unnecessary styles to TinyMCE.</p>\r\n</li>\r\n<li>\r\n<p><strong><code>content_style</code>:</strong> Use TinyMCE&rsquo;s <code>content_style</code> configuration to define styles inside the editor iframe. This ensures Tailwind&rsquo;s utility classes outside the iframe do not affect the editor's content.</p>\r\n</li>\r\n<li>\r\n<p><strong>Scoped Styles:</strong> If necessary, wrap the editor in a specific class (e.g., <code>tinymce-wrapper</code>) and explicitly reset or control Tailwind classes for TinyMCE.</p>\r\n</li>\r\n</ol>\r\n<h3><strong>Optional: Configure Tailwind Safelist</strong></h3>\r\n<p>If TinyMCE needs specific classes, safelist them in your <code>tailwind.config.js</code>:</p>\r\n<pre class=\"language-javascript\"><code>module.exports = {\r\n  content: [\r\n    \"./src/**/*.{js,jsx,ts,tsx}\",\r\n    // Add any TinyMCE-related HTML paths if needed\r\n  ],\r\n  safelist: [\r\n    \"tinymce-wrapper\",\r\n    \"not-prose\", // Add this if required for global utility isolation\r\n  ],\r\n};\r\n</code></pre>",
    "category": "tech",
    "likes": [],
    "createdAt": "2024-12-02T23:14:20.347Z",
    "__v": 0
  },
  {
    "_id": "674e4c881c2485087b6eac80",
    "name": "test",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1733184648/b32mrhukukzsekixlesd.jpg",
    "content": "<h2>i test typo work</h2>\r\n<pre class=\"language-javascript\"><code>function throttle(func, delay) {\r\n    let lastCall = 0;\r\n\r\n    return function(...args) {\r\n        const now = new Date().getTime();\r\n        if (now - lastCall &gt;= delay) {\r\n            func(...args);\r\n            lastCall = now;\r\n        }\r\n    };\r\n}\r\n\r\n// Example usage:\r\n\r\n// Function that will be throttled\r\nfunction handleResize() {\r\n    console.log('Window resized!');\r\n}\r\n\r\n// Throttle the function to run at most once every 500ms\r\nconst throttledResize = throttle(handleResize, 500);\r\n\r\n// Attach the throttled function to the window resize event\r\nwindow.addEventListener('resize', throttledResize);\r\n</code></pre>",
    "category": "tech",
    "likes": [],
    "createdAt": "2024-12-03T00:10:48.912Z",
    "__v": 0
  },
  {
    "_id": "674fa26dbf4f0e0775bcbb57",
    "name": "test",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1733272173/jb9eecp5v75ardxr8fpj.jpg",
    "content": "<h1>hi check this</h1>\r\n<ul>\r\n<li>dxcfgvhbjn</li>\r\n<li>fcvghbjnmkl,</li>\r\n<li>dxfcgvhjnkl</li>\r\n</ul>\r\n<ol>\r\n<li>sxdcfgvbhjnk</li>\r\n<li>sxdcfgvbhjnmkl</li>\r\n<li>szdxcfgvbhjnmkl,</li>\r\n</ol>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: rgb(22, 145, 121);\"><strong>dxcfgvbhjnkml,</strong></span></p>\r\n<p><span style=\"color: rgb(22, 145, 121);\"><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;wsdexfcrgtvbhjnmk</strong></span></p>\r\n<p><span style=\"color: rgb(22, 145, 121);\"><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: rgb(52, 73, 94);\">zsdxfcgvbhjnkm</span></strong></span></p>\r\n<p><em><span style=\"color: rgb(22, 145, 121);\"><strong><span style=\"color: rgb(52, 73, 94);\">xdfcgvbhjnm,</span></strong></span></em></p>\r\n<p><em><span style=\"color: rgb(22, 145, 121);\"><strong><span style=\"color: rgb(52, 73, 94);\">szdxcfgvhbjnkml,;.</span></strong></span></em></p>\r\n<p><em><span style=\"color: rgb(22, 145, 121);\"><strong><span style=\"color: rgb(52, 73, 94);\">szdxfcgvhbjnkml,;.</span></strong></span></em></p>\r\n<p><em><span style=\"color: rgb(22, 145, 121);\"><strong><span style=\"color: rgb(52, 73, 94);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: rgb(52, 73, 94);\">d jnmksdxcfvgbhjnkml,</span></span></strong></span></em></p>\r\n<p>&nbsp;</p>",
    "category": "tech",
    "likes": [],
    "createdAt": "2024-12-04T00:29:33.538Z",
    "__v": 0
  },
  {
    "_id": "6750cd0425309e9c057a930b",
    "name": "ali",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1733348612/azfuvgzxcgwubdmekbbp.png",
    "content": "<p>To create an animation in Tailwind CSS where an element starts with an opacity of 10 and transitions to full opacity, you can define a custom animation using the <code>@keyframes</code> directive in your CSS and extend Tailwind's configuration.</p>\r\n<p>Here&rsquo;s how you can achieve this:</p>\r\n<hr>\r\n<h3>Step 1: Extend Tailwind Configuration</h3>\r\n<p>In your <code>tailwind.config.js</code>, add a custom animation:</p>\r\n<pre><code class=\"language-javascript\">module.exports = {\r\n  theme: {\r\n    extend: {\r\n      keyframes: {\r\n        fadeIn: {\r\n          '0%': { opacity: '0.1' }, // Initial opacity 10%\r\n          '100%': { opacity: '1' }, // Full opacity\r\n        },\r\n      },\r\n      animation: {\r\n        fadeIn: 'fadeIn 1.5s ease-in-out', // Animation name and duration\r\n      },\r\n    },\r\n  },\r\n  plugins: [],\r\n};\r\n</code></pre>\r\n<hr>\r\n<h3>Step 2: Apply the Animation in Your HTML</h3>\r\n<p>Use the <code>animate-fadeIn</code> class in your HTML element:</p>\r\n<pre><code class=\"language-html\">&lt;div class=\"animate-fadeIn bg-blue-500 text-white p-6 rounded-lg\"&gt;\r\n  This fades in from 10% opacity to full opacity.\r\n&lt;/div&gt;\r\n</code></pre>\r\n<hr>\r\n<h3>Step 3: Optional - Customize Duration or Timing</h3>\r\n<p>You can adjust the duration (<code>1.5s</code>) and easing (<code>ease-in-out</code>) in the <code>tailwind.config.js</code> or override it in the HTML using utilities like <code>duration-[time]</code> and <code>ease-[value]</code>.</p>\r\n<p>Example:</p>\r\n<pre><code class=\"language-html\">&lt;div class=\"animate-fadeIn duration-2000 ease-linear\"&gt;\r\n  This fades in slower with a linear effect.\r\n&lt;/div&gt;\r\n</code></pre>\r\n<hr>\r\n<p>Now, your animation will transition the element's opacity from 10% to 100% smoothly!</p>",
    "category": "tech",
    "likes": [],
    "createdAt": "2024-12-04T21:43:32.771Z",
    "__v": 0
  },
  {
    "_id": "6750cf5025309e9c057a931f",
    "name": "useEffect mistake",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1733349200/bgpls7qckmnsbh1xcqcc.png",
    "content": "<p>The issue here is likely that the <code>user</code> object is initially undefined when your component renders. If the <code>user</code> data is being fetched asynchronously, it will be undefined until the fetch is complete, causing <code>user?.role</code> to also be undefined initially.</p>\r\n<p>To handle this properly:</p>\r\n<h3>1. <strong>Check for <code>user</code> Initialization</strong></h3>\r\n<p>Ensure that <code>user</code> is properly initialized. If it's coming from a context, state, or API call, it might take some time to load.</p>\r\n<hr>\r\n<h3>2. <strong>Handle Undefined <code>user</code> in <code>useEffect</code></strong></h3>\r\n<p>You can add a condition in your <code>useEffect</code> to ensure the code only executes when <code>user</code> is defined:</p>\r\n<pre><code class=\"language-javascript\">useEffect(() =&gt; {\r\n  if (user &amp;&amp; user?.role !== \"admin\") {\r\n    console.log(user.role);\r\n    // redirect(\"/\");\r\n  }\r\n}, [user]);\r\n</code></pre>\r\n<p>This prevents the code from running until <code>user</code> is available.</p>\r\n<hr>\r\n<h3>3. <strong>Default Value for <code>user</code></strong></h3>\r\n<p>If <code>user</code> is coming from a state, initialize it with a default value like <code>null</code> to avoid unexpected behavior:</p>\r\n<pre><code class=\"language-javascript\">const [user, setUser] = useState(null);\r\n</code></pre>\r\n<hr>\r\n<h3>4. <strong>Check Data Source</strong></h3>\r\n<p>If <code>user</code> comes from a fetch or API call, ensure the API returns the data properly. For example:</p>\r\n<pre><code class=\"language-javascript\">useEffect(() =&gt; {\r\n  const fetchUser = async () =&gt; {\r\n    const response = await fetch(\"/api/user\");\r\n    const data = await response.json();\r\n    setUser(data);\r\n  };\r\n\r\n  fetchUser();\r\n}, []);\r\n</code></pre>\r\n<hr>\r\n<h3>5. <strong>Debug Undefined <code>user</code></strong></h3>\r\n<p>To debug why <code>user</code> might be undefined:</p>\r\n<ul>\r\n<li>\r\n<p>Log the <code>user</code> object before using it:</p>\r\n<pre><code class=\"language-javascript\">useEffect(() =&gt; {\r\n  console.log(\"User:\", user);\r\n  if (user &amp;&amp; user?.role !== \"admin\") {\r\n    console.log(user.role);\r\n    // redirect(\"/\");\r\n  }\r\n}, [user]);\r\n</code></pre>\r\n</li>\r\n<li>\r\n<p>Verify the source of <code>user</code> (context, props, state) to ensure it's being passed and updated correctly.</p>\r\n</li>\r\n</ul>\r\n<hr>\r\n<h3>6. <strong>Optional Redirect Logic</strong></h3>\r\n<p>If the <code>redirect</code> is uncommented, ensure it runs only when <code>user</code> is available to avoid errors:</p>\r\n<pre><code class=\"language-javascript\">useEffect(() =&gt; {\r\n  if (user &amp;&amp; user?.role !== \"admin\") {\r\n    console.log(user.role);\r\n    // Perform the redirect here\r\n    redirect(\"/\");\r\n  }\r\n}, [user]);\r\n</code></pre>\r\n<hr>\r\n<h3>Summary</h3>\r\n<p>Ensure:</p>\r\n<ul>\r\n<li><code>user</code> is properly initialized and fetched.</li>\r\n<li>Conditional checks for <code>undefined</code> values in <code>useEffect</code>.</li>\r\n<li>Debugging logs are in place to confirm the data flow.</li>\r\n</ul>\r\n<p>If you're using an external library for redirection (like <code>next/router</code> or <code>react-router-dom</code>), verify its setup is correct.</p>",
    "category": "tech",
    "likes": [],
    "createdAt": "2024-12-04T21:53:20.420Z",
    "__v": 0
  },
  {
    "_id": "6750d17525309e9c057a9335",
    "name": "Creating a robust API involves several steps, including defining its structure, endpoints, methods, and ensuring it adheres to standards like REST or GraphQL.",
    "image": "http://res.cloudinary.com/dsntudbsp/image/upload/v1733349750/vzzlztx4kae5u65sbqvw.jpg",
    "content": "<p>Creating a robust API involves several steps, including defining its structure, endpoints, methods, and ensuring it adheres to standards like REST or GraphQL. Here's a complete structure for building a RESTful API using Node.js and Express.js as an example:</p>\r\n<hr>\r\n<h3><strong>Step 1: Define the Project Structure</strong></h3>\r\n<p>Organize your project for scalability and maintainability. Here's an example structure:</p>\r\n<pre><code>my-api/\r\n├── config/\r\n│   └── db.js              # Database connection logic\r\n├── controllers/\r\n│   └── userController.js  # Handles the logic for user-related routes\r\n├── middlewares/\r\n│   └── authMiddleware.js  # Authentication and authorization middleware\r\n├── models/\r\n│   └── userModel.js       # User schema and database interactions\r\n├── routes/\r\n│   └── userRoutes.js      # Defines routes for user-related endpoints\r\n├── utils/\r\n│   └── errorHandler.js    # Custom error handling logic\r\n├── .env                   # Environment variables\r\n├── app.js                 # Main application file\r\n├── server.js              # Server entry point\r\n└── package.json           # Dependencies and scripts\r\n</code></pre>\r\n<hr>\r\n<h3><strong>Step 2: Set Up the Environment</strong></h3>\r\n<p>Install required dependencies:</p>\r\n<pre><code class=\"language-bash\">npm init -y\r\nnpm install express dotenv mongoose body-parser cors morgan\r\nnpm install --save-dev nodemon\r\n</code></pre>\r\n<p>Set up your <code>.env</code> file:</p>\r\n<pre><code class=\"language-env\">PORT=5000\r\nDB_URI=mongodb://localhost:27017/myapi\r\nJWT_SECRET=your_jwt_secret\r\n</code></pre>\r\n<hr>\r\n<h3><strong>Step 3: Create the Main App (app.js)</strong></h3>\r\n<pre><code class=\"language-javascript\">const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\nconst morgan = require('morgan');\r\nconst dotenv = require('dotenv');\r\nconst userRoutes = require('./routes/userRoutes');\r\n\r\ndotenv.config();\r\nconst app = express();\r\n\r\n// Middlewares\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\napp.use(morgan('dev'));\r\n\r\n// Routes\r\napp.use('/api/users', userRoutes);\r\n\r\nmodule.exports = app;\r\n</code></pre>\r\n<hr>\r\n<h3><strong>Step 4: Create the Server (server.js)</strong></h3>\r\n<pre><code class=\"language-javascript\">const app = require('./app');\r\nconst mongoose = require('mongoose');\r\n\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Connect to the Database\r\nmongoose\r\n  .connect(process.env.DB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() =&gt; {\r\n    console.log('Database connected successfully');\r\n    app.listen(PORT, () =&gt; {\r\n      console.log(`Server is running on http://localhost:${PORT}`);\r\n    });\r\n  })\r\n  .catch((err) =&gt; {\r\n    console.error('Database connection error:', err.message);\r\n  });\r\n</code></pre>\r\n<hr>\r\n<h3><strong>Step 5: Define Models (models/userModel.js)</strong></h3>\r\n<pre><code class=\"language-javascript\">const mongoose = require('mongoose');\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  name: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n});\r\n\r\nmodule.exports = mongoose.model('User', userSchema);\r\n</code></pre>\r\n<hr>\r\n<h3><strong>Step 6: Create Controllers (controllers/userController.js)</strong></h3>\r\n<pre><code class=\"language-javascript\">const User = require('../models/userModel');\r\n\r\n// Get All Users\r\nexports.getAllUsers = async (req, res) =&gt; {\r\n  try {\r\n    const users = await User.find();\r\n    res.status(200).json(users);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Create a New User\r\nexports.createUser = async (req, res) =&gt; {\r\n  try {\r\n    const { name, email, password } = req.body;\r\n    const newUser = new User({ name, email, password });\r\n    await newUser.save();\r\n    res.status(201).json(newUser);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n</code></pre>\r\n<hr>\r\n<h3><strong>Step 7: Define Routes (routes/userRoutes.js)</strong></h3>\r\n<pre><code class=\"language-javascript\">const express = require('express');\r\nconst { getAllUsers, createUser } = require('../controllers/userController');\r\n\r\nconst router = express.Router();\r\n\r\n// GET /api/users\r\nrouter.get('/', getAllUsers);\r\n\r\n// POST /api/users\r\nrouter.post('/', createUser);\r\n\r\nmodule.exports = router;\r\n</code></pre>\r\n<hr>\r\n<h3><strong>Step 8: Add Middleware (middlewares/authMiddleware.js)</strong></h3>\r\n<pre><code class=\"language-javascript\">const jwt = require('jsonwebtoken');\r\n\r\n// Authentication Middleware\r\nmodule.exports = (req, res, next) =&gt; {\r\n  const token = req.header('Authorization');\r\n  if (!token) return res.status(401).json({ message: 'Access denied. No token provided.' });\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n    req.user = decoded;\r\n    next();\r\n  } catch (err) {\r\n    res.status(400).json({ message: 'Invalid token.' });\r\n  }\r\n};\r\n</code></pre>\r\n<hr>\r\n<h3><strong>Step 9: Add Utilities (utils/errorHandler.js)</strong></h3>\r\n<pre><code class=\"language-javascript\">module.exports = (err, req, res, next) =&gt; {\r\n  console.error(err.stack);\r\n  res.status(500).json({ message: 'Something went wrong!' });\r\n};\r\n</code></pre>\r\n<hr>\r\n<h3><strong>Step 10: Test Your API</strong></h3>\r\n<p>Use tools like <strong>Postman</strong> or <strong>cURL</strong> to test the endpoints. For example:</p>\r\n<ul>\r\n<li><strong>GET</strong> <code>/api/users</code></li>\r\n<li><strong>POST</strong> <code>/api/users</code> with JSON body:\r\n<pre><code class=\"language-json\">{\r\n  \"name\": \"John Doe\",\r\n  \"email\": \"john@example.com\",\r\n  \"password\": \"password123\"\r\n}\r\n</code></pre>\r\n</li>\r\n</ul>\r\n<hr>\r\n<h3><strong>Optional: Add API Documentation</strong></h3>\r\n<p>Integrate Swagger for API documentation:</p>\r\n<pre><code class=\"language-bash\">npm install swagger-jsdoc swagger-ui-express\r\n</code></pre>\r\n<p>Add Swagger setup in <code>app.js</code> and define your API schema.</p>\r\n<hr>\r\n<p>This is a scalable and maintainable structure for building an API. If you need examples for advanced features like authentication, rate-limiting, or pagination, let me know!</p>",
    "category": "tech",
    "likes": [],
    "createdAt": "2024-12-04T22:02:29.999Z",
    "__v": 0
  }
]
